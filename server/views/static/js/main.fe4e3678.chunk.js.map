{"version":3,"sources":["http-common.js","services/user-service.js","components/add-user-component.js","components/user-component.js","components/user-list.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","AddUser","props","onChangeUsername","bind","saveUser","newUser","state","username","submitted","e","this","setState","target","value","UserDataService","then","response","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","Component","User","getUser","updateUser","currentUser","message","match","params","prevState","update","UserList","retrieveUsers","refreshList","setActiveUser","users","currentIndex","getAll","user","index","map","to","App","href","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"oOAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,wBACTC,QAAS,CACP,eAAgB,sBC4BL,M,sFA9Bb,WACE,OAAOC,EAAKC,IAAI,W,iBAGlB,SAAIC,GACF,OAAOF,EAAKC,IAAL,gBAAkBC,M,oBAG3B,SAAOC,GACL,OAAOH,EAAKI,KAAK,eAAgBD,K,oBAGnC,SAAOD,EAAIC,GACT,OAAOH,EAAKK,IAAL,iBAAmBH,GAAMC,O,aCbfG,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAExB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAEf,EAAKG,MAAQ,CACXV,GAAI,KACJW,SAAU,GACVC,WAAW,GAVI,E,oDAcnB,SAAiBC,GACfC,KAAKC,SAAS,CACZJ,SAAUE,EAAEG,OAAOC,U,sBAIvB,WAAY,IAAD,OACLhB,EAAO,CACTU,SAAUG,KAAKJ,MAAMC,UAGvBO,EAAgBvB,OAAOM,GACpBkB,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAASnB,KAAKU,UAC1B,EAAKI,SAAS,CACZf,GAAIoB,EAASnB,KAAKD,GAClBW,SAAUS,EAASnB,KAAKU,SAExBC,WAAW,IAEbS,QAAQC,IAAIF,EAASnB,SAEtBsB,OAAM,SAAAV,GACLQ,QAAQC,IAAIT,Q,qBAIlB,WACEC,KAAKC,SAAS,CACZf,GAAI,KACJW,SAAU,GAEVC,WAAW,M,oBAIf,WACE,OACE,qBAAKY,UAAU,cAAf,SACGV,KAAKJ,MAAME,UACV,gCACE,6DACA,wBAAQY,UAAU,kBAAkBC,QAASX,KAAKL,QAAlD,oBAKF,gCACE,sBAAKe,UAAU,aAAf,UACE,uBAAOE,QAAQ,WAAf,sBACA,uBACEC,KAAK,OACLH,UAAU,eACVxB,GAAG,WACH4B,UAAQ,EACRX,MAAOH,KAAKJ,MAAMC,SAClBkB,SAAUf,KAAKR,iBACfwB,KAAK,gBAIT,wBAAQL,QAASX,KAAKN,SAAUgB,UAAU,kBAA1C,6B,GA5EyBO,a,QCAhBC,E,kDACnB,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAK0B,QAAU,EAAKA,QAAQ1B,KAAb,gBACf,EAAK2B,WAAa,EAAKA,WAAW3B,KAAhB,gBAGlB,EAAKG,MAAQ,CACXyB,YAAa,CACXnC,GAAI,KACJW,SAAU,IAEZyB,QAAS,IAbM,E,qDAiBnB,WACEtB,KAAKmB,QAAQnB,KAAKT,MAAMgC,MAAMC,OAAOtC,M,8BAGvC,SAAiBa,GACf,IAAMF,EAAWE,EAAEG,OAAOC,MAE1BH,KAAKC,UAAS,SAASwB,GACrB,MAAO,CACLJ,YAAY,2BACPI,EAAUJ,aADJ,IAETxB,SAAUA,U,qBAMlB,SAAQX,GAAK,IAAD,OACVkB,EAAgBnB,IAAIC,GACjBmB,MAAK,SAAAC,GACJ,EAAKL,SAAS,CACZoB,YAAaf,EAASnB,OAExBoB,QAAQC,IAAIF,EAASnB,SAEtBsB,OAAM,SAAAV,GACLQ,QAAQC,IAAIT,Q,wBAGlB,WAAc,IAAD,OACXK,EAAgBsB,OACd1B,KAAKJ,MAAMyB,YAAYnC,GACvBc,KAAKJ,MAAMyB,aAEVhB,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAASnB,MACrB,EAAKc,SAAS,CACZqB,QAAS,0CAGZb,OAAM,SAAAV,GACLQ,QAAQC,IAAIT,Q,oBAkClB,WACE,IAAQsB,EAAgBrB,KAAKJ,MAArByB,YAER,OACE,8BACGA,EACC,sBAAKX,UAAU,YAAf,UACE,sCACA,+BACE,sBAAKA,UAAU,aAAf,UACE,uBAAOE,QAAQ,WAAf,sBACA,uBACEC,KAAK,OACLH,UAAU,eACVxB,GAAG,WACHiB,MAAOkB,EAAYxB,SACnBkB,SAAUf,KAAKR,wBAMrB,4BAAIQ,KAAKJ,MAAM0B,aAGjB,gCACE,uBACA,mE,GAxHsBL,aCCbU,E,kDACnB,WAAYpC,GAAQ,IAAD,8BACjB,cAAMA,IAEDqC,cAAgB,EAAKA,cAAcnC,KAAnB,gBACrB,EAAKoC,YAAc,EAAKA,YAAYpC,KAAjB,gBACnB,EAAKqC,cAAgB,EAAKA,cAAcrC,KAAnB,gBAIrB,EAAKG,MAAQ,CACXmC,MAAO,GACPV,YAAa,KAEbW,cAAe,GAbA,E,qDAkBnB,WACEhC,KAAK4B,kB,2BAaP,WAAiB,IAAD,OACdxB,EAAgB6B,SACb5B,MAAK,SAAAC,GACJ,EAAKL,SAAS,CACZ8B,MAAOzB,EAASnB,OAElBoB,QAAQC,IAAIF,EAASnB,SAEtBsB,OAAM,SAAAV,GACLQ,QAAQC,IAAIT,Q,yBAIlB,WACEC,KAAK4B,gBACL5B,KAAKC,SAAS,CACZoB,YAAa,KACbW,cAAe,M,2BAInB,SAAcE,EAAMC,GAClBnC,KAAKC,SAAS,CACZoB,YAAaa,EACbF,aAAcG,M,oBA6BlB,WAAU,IAAD,OAEP,EAA6CnC,KAAKJ,MAA1CmC,EAAR,EAAQA,MAAOV,EAAf,EAAeA,YAAaW,EAA5B,EAA4BA,aA8C5B,OACE,sBAAKtB,UAAU,WAAf,mBAEE,sBAAKA,UAAU,WAAf,UACE,2CAEA,oBAAIA,UAAU,aAAd,SACGqB,GACCA,EAAMK,KAAI,SAACF,EAAMC,GAAP,OACR,oBACEzB,UACE,oBACCyB,IAAUH,EAAe,SAAW,IAEvCrB,QAAS,kBAAM,EAAKmB,cAAcI,EAAMC,IAL1C,SAQGD,EAAKrC,UAFDsC,WAQf,qBAAKzB,UAAU,WAAf,SACGW,EACC,gCACE,sCACA,gCACE,gCACE,iDACO,IACRA,EAAYxB,YAGf,cAAC,IAAD,CACEwC,GAAI,SAAWhB,EAAYnC,GAC3BwB,UAAU,sBAFZ,qBAQF,gCACE,uBACA,sE,GAlLwBO,aCKhCqB,E,4JACJ,WACE,OACE,gCACE,sBAAK5B,UAAU,2CAAf,UACE,mBAAG6B,KAAK,QAAQ7B,UAAU,eAA1B,mBAGA,sBAAKA,UAAU,qBAAf,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAM2B,GAAI,QAAS3B,UAAU,WAA7B,yBAKF,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAM2B,GAAI,UAAW3B,UAAU,WAA/B,qCAON,qBAAKA,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO8B,OAAK,EAACC,KAAM,CAAC,IAAK,SAAUC,UAAWf,IAC9C,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,UAAUC,UAAWpD,IACvC,cAAC,IAAD,CAAOmD,KAAK,YAAYC,UAAWxB,gB,GA3B7BD,aAmCHqB,IChCKK,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2DCXRwB,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDwHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd9C,OAAM,SAAA+C,GACLjD,QAAQiD,MAAMA,EAAMlC,c","file":"static/js/main.fe4e3678.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://localhost:8080\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\n\nclass UserDataService {\n  getAll() {\n    return http.get(\"/user\");\n  }\n\n  get(id) {\n    return http.get(`/user/${id}`);\n  }\n\n  create(data) {\n    return http.post(\"/user/signup\", data);\n  }\n\n  update(id, data) {\n    return http.put(`/users/${id}`, data);\n  }\n/*\n  delete(id) {\n    return http.delete(`/users/${id}`);\n  }\n\n  deleteAll() {\n    return http.delete(`/users`);\n  }\n\n  findByTitle(title) {\n    return http.get(`/users?title=${title}`);\n  }\n  */\n}\n\nexport default new UserDataService();","import React, { Component } from \"react\";\nimport UserDataService from \"../services/user-service\";\n\nexport default class AddUser extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    //this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.saveUser = this.saveUser.bind(this);\n    this.newUser = this.newUser.bind(this);\n\n    this.state = {\n      id: null,\n      username: \"\",\n      submitted: false\n    };\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  saveUser() {\n    var data = {\n      username: this.state.username,\n    };\n\n    UserDataService.create(data)\n      .then(response => {\n        console.log(response.data.username)\n        this.setState({\n          id: response.data.id,\n          username: response.data.username,\n\n          submitted: true\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  newUser() {\n    this.setState({\n      id: null,\n      username: \"\",\n\n      submitted: false\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"submit-form\">\n        {this.state.submitted ? (\n          <div>\n            <h4>You submitted successfully!</h4>\n            <button className=\"btn btn-success\" onClick={this.newUser}>\n              Add\n            </button>\n          </div>\n        ) : (\n          <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"username\">Username</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"username\"\n                required\n                value={this.state.username}\n                onChange={this.onChangeUsername}\n                name=\"username\"\n              />\n            </div>\n\n            <button onClick={this.saveUser} className=\"btn btn-success\">\n              Submit\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport UserDataService from \"../services/user-service\";\n\nexport default class User extends Component {\n  constructor(props) {\n    super(props);\n    //this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.getUser = this.getUser.bind(this);\n    this.updateUser = this.updateUser.bind(this);\n    //this.deleteUser = this.deleteUser.bind(this);\n\n    this.state = {\n      currentUser: {\n        id: null,\n        username: \"\",\n      },\n      message: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.getUser(this.props.match.params.id);\n  }\n\n  onChangeUsername(e) {\n    const username = e.target.value;\n\n    this.setState(function(prevState) {\n      return {\n        currentUser: {\n          ...prevState.currentUser,\n          username: username\n        }\n      };\n    });\n  }\n\n  getUser(id) {\n    UserDataService.get(id)\n      .then(response => {\n        this.setState({\n          currentUser: response.data\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n  updateUser() {\n    UserDataService.update(\n      this.state.currentUser.id,\n      this.state.currentUser\n    )\n      .then(response => {\n        console.log(response.data);\n        this.setState({\n          message: \"The user was updated successfully!\"\n        });\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  \n/*\n\n  deleteTutorial() {    \n    UserDataService.delete(this.state.currentUser.id)\n      .then(response => {\n        console.log(response.data);\n        this.props.history.push('/users')\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n     <button\n              className=\"badge badge-danger mr-2\"\n              onClick={this.deleteUser}\n            >\n              Delete\n            </button>\n\n            <button\n              type=\"submit\"\n              className=\"badge badge-success\"\n              onClick={this.updateUser}\n            >\n              Update\n            </button>\n*/\n  \n  render() {\n    const { currentUser } = this.state;\n\n    return (\n      <div>\n        {currentUser ? (\n          <div className=\"edit-form\">\n            <h4>User</h4>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"username\">Username</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"username\"\n                  value={currentUser.username}\n                  onChange={this.onChangeUsername}\n                />\n              </div>\n\n            </form>\n\n            <p>{this.state.message}</p>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Please click on a User...</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n\n","import React, { Component } from \"react\";\nimport UserDataService from \"../services/user-service\";\nimport { Link } from \"react-router-dom\";\n\nexport default class UserList extends Component {\n  constructor(props) {\n    super(props);\n    //this.onChangeSearchFirstName = this.onChangeSearchFirstName.bind(this);\n    this.retrieveUsers = this.retrieveUsers.bind(this);\n    this.refreshList = this.refreshList.bind(this);\n    this.setActiveUser = this.setActiveUser.bind(this);\n    //this.removeAllUsers = this.removeAllUsers.bind(this);\n    //this.searchUsername = this.searchUsername.bind(this);\n\n    this.state = {\n      users: [],\n      currentUser: null,\n      //array of Users\n      currentIndex: -1\n      //searchUsername: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.retrieveUsers();\n  }\n\n  /*\n  onChangeSearchTitle(e) {\n    const searchUser = e.target.value;\n\n    this.setState({\n      searchUser: searchUsername\n    });\n  }\n*/\n\n  retrieveUsers() {\n    UserDataService.getAll()\n      .then(response => {\n        this.setState({\n          users: response.data\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  refreshList() {\n    this.retrieveUsers();\n    this.setState({\n      currentUser: null,\n      currentIndex: -1\n    });\n  }\n\n  setActiveUser(user, index) {\n    this.setState({\n      currentUser: user,\n      currentIndex: index\n    });\n  }\n/*\n  removeAllUsers() {\n    SearchDataService.deleteAll()\n      .then(response => {\n        console.log(response.data);\n        this.refreshList();\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  searchUser() {\n    SearchUser.findByName(this.state.searchUser)\n      .then(response => {\n        this.setState({\n          users: response.data\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n*/\n  \n  render() {\n    //const { searchUsername, users, currentUser, currentIndex } = this.state;\n    const { users, currentUser, currentIndex } = this.state;\n\n/*\n<div className=\"col-md-8\">\n          <div className=\"input-group mb-3\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Search by name\"\n              value={searchUsername}\n              onChange={this.onChangeSearchUser}\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-outline-secondary\"\n                type=\"button\"\n                onClick={this.searchUsername}\n              >\n                Search\n              </button>\n            </div>\n          </div>\n        </div>\n           <ul className=\"list-group\">\n            {users &&\n              users.map((user, index) => (\n                <li\n                  className={\n                    \"list-group-item \" +\n                    (index === currentIndex ? \"active\" : \"\")\n                  }\n                  onClick={() => this.setActiveUser(user, index)}\n                  key={index}\n                >\n                  {user.username}\n                </li>\n              ))}\n          </ul>\n          <button\n            className=\"m-3 btn btn-sm btn-danger\"\n            onClick={this.removeAllUsers}\n          >\n            Remove All\n          </button>\n\n*/\n    return (\n      <div className=\"list row\">\n       Search\n        <div className=\"col-md-6\">\n          <h4>User List</h4>\n\n          <ul className=\"list-group\">\n            {users &&\n              users.map((user, index) => (\n                <li\n                  className={\n                    \"list-group-item \" +\n                    (index === currentIndex ? \"active\" : \"\")\n                  }\n                  onClick={() => this.setActiveUser(user, index)}\n                  key={index}\n                >\n                  {user.username}\n                </li>\n              ))}\n          </ul>\n\n        </div>\n        <div className=\"col-md-6\">\n          {currentUser ? (\n            <div>\n              <h4>User</h4>\n              <div>\n                <label>\n                  <strong>Username:</strong>\n                </label>{\" \"}\n                {currentUser.username}\n              </div>\n\n              <Link\n                to={\"/user/\" + currentUser.id}\n                className=\"badge badge-warning\"\n              >\n                Edit\n              </Link>\n            </div>\n          ) : (\n            <div>\n              <br />\n              <p>Please click on a User...</p>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddUser from \"./components/add-user-component\";\nimport User from \"./components/user-component\";\nimport UserList from \"./components/user-list\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <a href=\"/user\" className=\"navbar-brand\">\n            Users\n          </a>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/user\"} className=\"nav-link\">\n                All Users\n              </Link>\n            </li>\n          \n            <li className=\"nav-item\">\n              <Link to={\"/signup\"} className=\"nav-link\">\n                Create new User\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/user\"]} component={UserList} />\n            <Route exact path=\"/signup\" component={AddUser} />\n            <Route path=\"/user/:id\" component={User} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}